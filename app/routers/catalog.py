from aiogram import Router
from aiogram.filters import Text
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from sqlalchemy import select

from database import async_session
from keyboards import create_catalogs_or_tasks_markup, create_reply_markup, create_simple_inline_markup
from models import Catalog, Task
from states import CreatingCatalog

router = Router()


@router.callback_query(Text('my_catalogs'))
async def show_catalogs(callback: CallbackQuery) -> None:
    source = 'catalogs'
    async with async_session() as session:
        stmt = select(Catalog).filter_by(user_tg_id=callback.from_user.id)
        result = await session.scalars(stmt)
        catalogs = result.all()
    if catalogs:
        reply_markup = create_catalogs_or_tasks_markup(source, catalogs)
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫', reply_markup=reply_markup)
    else:
        reply_markup = create_simple_inline_markup({'–°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫': '–°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫'})
        await callback.message.answer('–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–ø–∏—Å–∫–æ–≤', reply_markup=reply_markup)


@router.callback_query(Text(startswith="catalogs"))
async def show_catalog_detail(callback_or_message: CallbackQuery | Message,
                              state: FSMContext = None, catalog_id: int = None) -> None:
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ <–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞> –≤ —á–∞—Ç–µ, –∏–ª–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏. –û—Ç —ç—Ç–æ–≥–æ –∑–∞–≤–∏—Å–∏—Ç,
    —á—Ç–æ –ø—Ä–∏–¥–µ—Ç –Ω–∞ –≤—Ö–æ–¥: –∏–ª–∏ CallbackQuery, –∏–ª–∏ Message """

    source = 'tasks'
    try:
        message = callback_or_message.message
        if not catalog_id:
            catalog_id = int(callback_or_message.data.split('_')[1])
    except AttributeError:
        message = callback_or_message
        data = await state.get_data()
        catalog_id = data['catalog_id']

    async with async_session() as session:
        stmt = select(Task).filter_by(catalog_id=catalog_id)
        result = await session.scalars(stmt)
        tasks = result.all()
    task_names_markup = create_catalogs_or_tasks_markup(source, tasks, catalog_id)
    await message.answer(
        f'{"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é" if tasks else "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—áüòî –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é"}',
        reply_markup=task_names_markup)


@router.callback_query(Text('create_catalog'))
async def request_catalog_name(callback: CallbackQuery, state: FSMContext) -> None:
    reply_markup = create_reply_markup(['–û—Ç–º–µ–Ω–∞'])
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á. –ù–∞–ø—Ä–∏–º–µ—Ä "–†–∞–±–æ—Ç–∞" –∏–ª–∏ "–î–æ–º"',
                                  reply_markup=reply_markup)
    await state.set_state(CreatingCatalog.request_catalog_name)


@router.message(CreatingCatalog.request_catalog_name)
async def create_catalog(message: Message, state: FSMContext) -> None:
    buttons = {'–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É': 'create_task',
               '–ú–æ–∏ —Å–ø–∏—Å–∫–∏': 'my_catalogs',
               }
    reply_markup = create_simple_inline_markup(buttons, 1)
    catalog_name = message.text
    async with async_session() as session:
        new_catalog = Catalog(name=catalog_name, user_tg_id=message.from_user.id)
        session.add(new_catalog)
        await session.flush()
        await session.refresh(new_catalog)
        await session.commit()
    await message.answer('–û—Ç–ª–∏—á–Ω–æ, —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É.', reply_markup=reply_markup)
    await state.set_data({'catalog_id': new_catalog.id})
    await state.set_state(CreatingCatalog.created_catalog)
